/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProtobufData } from "./ProtobufData";
import { ProtobufDataCountArgs } from "./ProtobufDataCountArgs";
import { ProtobufDataFindManyArgs } from "./ProtobufDataFindManyArgs";
import { ProtobufDataFindUniqueArgs } from "./ProtobufDataFindUniqueArgs";
import { CreateProtobufDataArgs } from "./CreateProtobufDataArgs";
import { UpdateProtobufDataArgs } from "./UpdateProtobufDataArgs";
import { DeleteProtobufDataArgs } from "./DeleteProtobufDataArgs";
import { ProtobufDataService } from "../protobufData.service";
@graphql.Resolver(() => ProtobufData)
export class ProtobufDataResolverBase {
  constructor(protected readonly service: ProtobufDataService) {}

  async _protobufDataItemsMeta(
    @graphql.Args() args: ProtobufDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProtobufData])
  async protobufDataItems(
    @graphql.Args() args: ProtobufDataFindManyArgs
  ): Promise<ProtobufData[]> {
    return this.service.protobufDataItems(args);
  }

  @graphql.Query(() => ProtobufData, { nullable: true })
  async protobufData(
    @graphql.Args() args: ProtobufDataFindUniqueArgs
  ): Promise<ProtobufData | null> {
    const result = await this.service.protobufData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProtobufData)
  async createProtobufData(
    @graphql.Args() args: CreateProtobufDataArgs
  ): Promise<ProtobufData> {
    return await this.service.createProtobufData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProtobufData)
  async updateProtobufData(
    @graphql.Args() args: UpdateProtobufDataArgs
  ): Promise<ProtobufData | null> {
    try {
      return await this.service.updateProtobufData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProtobufData)
  async deleteProtobufData(
    @graphql.Args() args: DeleteProtobufDataArgs
  ): Promise<ProtobufData | null> {
    try {
      return await this.service.deleteProtobufData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
